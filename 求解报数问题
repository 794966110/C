   /* 设有n个人站成一排，从左向右的编号分别为1～n，现在从左往右报数“1，2，1，2，…”，数到“1”的人出列，数到“2”的立即站到队伍的最右端。报数过程反复进行，直到n个人都出列为止。要求给出他们的出列顺序。
   例如，当n=8时，初始序列为
        1  2  3  4  5  6  7  8
   则出列顺序为
        1  3  5  7  2  6  4  8


  用一个队列解决出列问题，由于这里不需要使用已经出队后的元素，所以采用环形队列。
   算法思想：先将n个人的编号进队，然后反复执行如下操作，直到队列为空：
             1. 出队一个的元素，输出其编号—报数为1的人出列。
             2. 若队列不空，则再出队一个元素，并将刚出列的元素进队—报数为2的人站到队伍的最右端即队尾。*/
             


#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#define maxsize 50

typedef struct qNode
{
	int data[maxsize];
	int front, rear;
}sqQueue;

void initQueue(sqQueue** q)
{
	(*q) = (sqQueue*)malloc(sizeof(sqQueue));
	(*q)->front = (*q)->rear = -1;
}

bool enQueue(sqQueue** q,int e)
{
	if (((*q)->rear + 1) % maxsize == (*q)->front)
	{
		return false;
	}
	else
	{
		(*q)->rear = ((*q)->rear + 1) % maxsize;
		(*q)->data[(*q)->rear] = e;
		return true;
	}
}

bool deQueue(sqQueue** q, int* e)
{
	if ((*q)->rear  == (*q)->front)
	{
		return false;
	}
	
	(*q)->front = ((*q)->front + 1) % maxsize;
	*e = (*q)->data[(*q)->front];
	return true;
}

bool QueueEmpty(sqQueue** q)
{
	return ((*q)->front== (*q)->rear);
}

void destory(sqQueue** q)
{
	free(*q);
}

void number(int n)
{
	int i;int e;
	sqQueue* q;
	initQueue(&q);
	for (i = 1;i <= n;i++)//将1到n逐个进队
	{
		enQueue(&q, i);
	}
	printf("报数出列顺序：");
	while (!QueueEmpty(&q))//队列不空
	{
		deQueue(&q, &e);//队首出队
		printf("%d ", e);
		if (!QueueEmpty(&q))//仍然不空
		{
			deQueue(&q, &e);//出队一个元素e
			enQueue(&q, e);//将刚出队的元素进到队尾
		}
	}
		printf("\n");
		destory(&q);
}



int main()
{
	int i, n = 8;
	printf("初始序列：");
	for (i = 1;i <= n;i++)
		printf("%d ", i);
	printf("\n");
	number(8);
	
	return 0;
}
