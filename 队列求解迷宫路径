#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#define maxsize 50

typedef struct
{
	int i;
	int j;
	int pre;//前驱结点的数组位序
}Box;

typedef struct
{
	Box data[maxsize];
	int front;//头指针
	int rear;//尾指针
}sqQueue;//因为要将走过的路径保存起来，所以使用非循环队列


int mg[6][6] = 
{ {1, 1, 1, 1, 1, 1},
  {1, 0, 0, 0, 1, 1},
  {1, 0, 1, 0, 0, 1},
  {1, 0, 0, 0, 1, 1},
  {1, 1, 0, 0, 0, 1},
  {1, 1, 1, 1, 1, 1} };


void init(sqQueue** s)
{
	(*s) = (sqQueue*)malloc(sizeof(sqQueue));//申请一块内存空间
	(*s)->front = (*s)->rear = -1;
}

bool enQueue(sqQueue** s,Box e)
{
	if ((*s)->rear==maxsize-1)//队满
	{
		return false;
	}
	(*s)->data[++((*s)->rear)]=e;//先加一后队栈
	return true;
}

bool deQueue(sqQueue** s,Box *e)
{
	if ((*s)->front == (*s)->rear)//如果队空
	{
		return false;
	}
	*e=(*s)->data[++((*s)->front)];//front 后移，然后出队
	return true;
}

bool empty(sqQueue** s)
{
	return ((*s)->front == (*s)->rear);
}

void destory(sqQueue** s)
{
	free(*s);
}

void print(sqQueue* s)
{
	while (s->front !=-1)//因为front前的位序才是储存了迷宫的路径，所以从后往前输出
	{
		printf("(%d,%d)",s->data[s->front].i,s->data[s->front].j);
		s->front--;
	}
	
}

bool mgpath(int xi,int yi,int xe,int ye)
{
	sqQueue* s;init(&s);
	Box e;int i, j, i1, j1,di;//i,j临时保存出队的坐标;i1,j1用作探测下一步时的临时储存区
	e.i = xi;e.j = yi;e.pre = -1;//首个pre=-1
	enQueue(&s,e);
	mg[xi][yi] = -1;
	while (!empty(&s))
	{
		deQueue(&s, &e);
		i = e.i;j = e.j;//出队，进行探测
		if (i == xe && j == ye)//找到出口
		{
			print(s);//打印
			destory(&s);//销毁
			return true;
		}
		for (di=0;di<4;di++)//di表示下一步的方向
		{
			
			switch (di)
			{
			case 0:i1 = i - 1, j1 = j;break;//左移
			case 1:i1 = i;j1 = j + 1;break;//上移
			case 2:i1 = i + 1, j1 = j;break;//右移
			case 3:i1 = i;j1 = j - 1;break;//下移
			}
			if (mg[i1][j1] == 0)//找到下一个方块
			{
				e.i = i1;e.j = j1;//将i1，j1放回e里
				e.pre = s->front;//将front保存在pre中,0,1,2...
				enQueue(&s, e);//e进队
				mg[i1][j1] = -1;//走过的路径变为-1
			}
		}
		
	}
	destory(&s);
	return false;//未找到出口
}

int main()
{	
	mgpath(1, 1, 4, 4);
	return 0;
}
