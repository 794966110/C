#include<stdio.h>
#include<stdbool.h>
#include<stdlib.h>
#define maxsize 50

typedef struct
{
	int n;
	char x, y, z;
	bool flag;
}ElemType;

typedef struct
{
	ElemType data[maxsize];
	int top;
}StackType;

void initstack(StackType** st)
{
	(*st) = (StackType*)malloc(sizeof(StackType));
	(*st)->top = -1;
}

bool push(StackType** st, ElemType e)
{
	if ((*st)->top == maxsize - 1)
	{
		return false;
	}
	else
	{
		(*st)->top++;
		(*st)->data[(*st)->top] = e;
		return true;
	}

}

bool pop(StackType** st, ElemType* e)
{
	if ((*st)->top == -1)
	{
		return false;
	}
	else
	{
		*e = (*st)->data[(*st)->top];
		(*st)->top--;
		return true;
	}
}

bool stackempty(StackType* st)
{
	return ((st)->top == -1);
}

void hanoi(int n, char x, char y, char z)
{
	StackType* st;
	ElemType e, e1, e2, e3;
	if (n <= 0)return 0;//参数错误时
	initstack(&st);
	e.n = n;e.x = x;e.y = y;e.z = z;e.flag = false;//初始化e
	push(&st, e);//进栈
	while (!stackempty(st))
	{
		pop(&st, &e);//出栈
		if (e.flag == false)
		{
			e1.n = e.n - 1;e1.x = e.y;e1.y=e.x;e1.z = e.z;//把e赋值给e1
			if (e1.n == 1)	e1.flag = true;//只有一个盘片时可以直接移动
			else			e1.flag = false;//有一个以上的盘片时不能直接移动
			push(&st, e1);//处理Hanoi(n-1,y,x,z)步骤

			e2.n = e.n;e2.x = e.x;e2.y = e.y;e2.z = e.z;
			push(&st, e2);//处理move（n,x,z)步骤
			
			e3.n = e.n - 1;e3.x = e.x;e3.y = e.z;e3.z = e.y;
			if (e3.n == 1)//只有一个盘片可直接移动
			{
				e3.flag = true;
			}
			else
			{
				e3.flag = false;//有一个盘片时不能直接移动
			}
			push(&st, e3);//处理hanoi(x,z,y)步骤

		}
		else
		{
			printf("将第%d个盘片从%c移动到%c\n", e.n, e.x, e.z);
		}
	}
}

int main()
{
	char x='x', y='y', z='z';
	
	hanoi(7, x, y, z);
	return 0;
}
