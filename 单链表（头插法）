#include<stdio.h>
#include<stdlib.h>

typedef struct LNode {
	int data;
	struct  LNode* next;
}*LinkNode, Node;

void createlist1(LinkNode L, int a[], int n);
void createlist1(LinkNode L, int a[], int n)
{
	LinkNode s;int i;
	
	if (L)
	{
		L->next = NULL;
	}

	for (i = 0;i < n;i++)
	{
		s = (LinkNode)malloc(sizeof(Node));
		if (s) {
			s->data = a[i];
			s->next = L->next;
			L->next = s;
		}
	}
}
void destory(LinkNode L)
{
	free(L);
}

void listinsert(LinkNode L, int i, int e)
{
	LinkNode s;
	LinkNode p = L;
	for (int j = 1;j < i;j++)
	{
		p = p->next;
	}
	s = (LinkNode)malloc(sizeof(Node));
	if (s)
	{
		s->next = NULL;
		s->data = e;
		s->next = p->next;
		p->next = s;
	}

}

int count(Node *L)//递归计算单链表的结点数
{
	if (L == NULL)
	{
		return 0;
	}
	else
	{
		return count(L->next)+1;
	}
}

void display(LinkNode L)//递归输出
{
	if (L == NULL)
	{
		return;
	}
	else
	{
		display(L->next);
		printf("%d ", L->data);
	}
}

int main()
{
	LinkNode head;
	head = (LinkNode)malloc(sizeof(Node));
	if (head == NULL)
	{
		printf("内存分配不成功！\n");
	}
	else
	{
		head->next = NULL;
	}
	int a[] = { 1,2,3,4,5,6,7,8,9 };
	int n = sizeof(a) / sizeof(int);
	createlist1(head, a, n);
	display(head->next);putchar('\n');
	printf("%d\n", count(head->next));
	listinsert(head, 10, 5);
	n++;
	/*for (int i = 0;i < n;i++)//常规输出
	{
		printf("%d ", head->next->date);
		head = head->next;
	}*/
	display(head->next);putchar('\n');//递归输出
	printf("%d\n", count(head->next));
	destory(head);
	return 0;
}
